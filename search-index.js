var searchIndex = {};
searchIndex['inlinable_string'] = {"items":[[0,"","inlinable_string","The `inlinable_string` crate provides the\n[`InlinableString`](./enum.InlinableString.html) type &mdash; an owned,\ngrow-able UTF-8 string that stores small strings inline and avoids\nheap-allocation &mdash; and the\n[`StringExt`](./string_ext/trait.StringExt.html) trait which abstracts\nstring operations over both `std::string::String` and `InlinableString` (or\neven your own custom string type).",null,null],[4,"InlinableString","","An owned, grow-able UTF-8 string that allocates short strings inline on the\nstack.",null,null],[13,"Heap","","A heap-allocated string.",0,null],[13,"Inline","","A small string stored inline.",0,null],[0,"inline_string","","A short UTF-8 string that uses inline storage and does no heap\nallocation. It may be no longer than `INLINE_STRING_CAPACITY` bytes long.",null,null],[3,"InlineString","inlinable_string::inline_string","A short UTF-8 string that uses inline storage and does no heap allocation.",null,null],[3,"NotEnoughSpaceError","","The error returned when there is not enough space in a `InlineString` for the\nrequested operation.",null,null],[17,"INLINE_STRING_CAPACITY","","The capacity (in bytes) of inline storage for small strings.\n`InlineString::len()` may never be larger than this.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"inlinestring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"inlinestring"}],"output":{"name":"inlinestring"}}],[11,"eq","","",2,{"inputs":[{"name":"notenoughspaceerror"},{"name":"notenoughspaceerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"notenoughspaceerror"},{"name":"notenoughspaceerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"notenoughspaceerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",1,{"inputs":[{"name":"inlinestring"}],"output":{"name":"str"}}],[11,"as_ref","","",1,null],[11,"as_mut","","",1,{"inputs":[{"name":"inlinestring"}],"output":{"name":"str"}}],[11,"as_mut","","",1,null],[11,"from","","",1,{"inputs":[{"name":"inlinestring"},{"name":"str"}],"output":{"name":"inlinestring"}}],[11,"fmt","","",1,{"inputs":[{"name":"inlinestring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"inlinestring"},{"name":"h"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"inlinestring"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",1,{"inputs":[{"name":"inlinestring"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",1,{"inputs":[{"name":"inlinestring"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",1,{"inputs":[{"name":"inlinestring"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",1,{"inputs":[{"name":"inlinestring"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",1,{"inputs":[{"name":"inlinestring"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",1,{"inputs":[{"name":"inlinestring"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",1,{"inputs":[{"name":"inlinestring"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"inlinestring"}],"output":{"name":"str"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"inlinestring"}],"output":{"name":"str"}}],[11,"default","","",1,{"inputs":[{"name":"inlinestring"}],"output":{"name":"inlinestring"}}],[11,"eq","","",1,{"inputs":[{"name":"inlinestring"},{"name":"inlinestring"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"inlinestring"},{"name":"inlinestring"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"inlinestring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"inlinestring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"inlinestring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"inlinestring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"inlinestring"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"cow"},{"name":"inlinestring"}],"output":{"name":"bool"}}],[11,"eq","inlinable_string::inline_string","",1,{"inputs":[{"name":"inlinestring"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"inlinestring"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",1,{"inputs":[{"name":"inlinestring"}],"output":{"name":"inlinestring"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8. Trailing bytes are\nzeroed.",1,null],[11,"push_str","","Pushes the given string onto this string buffer.",1,{"inputs":[{"name":"inlinestring"},{"name":"str"}],"output":{"name":"result"}}],[11,"push","","Adds the given character to the end of the string.",1,{"inputs":[{"name":"inlinestring"},{"name":"char"}],"output":{"name":"result"}}],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",1,null],[11,"truncate","","Shortens a string to the specified length.",1,{"inputs":[{"name":"inlinestring"},{"name":"usize"}],"output":null}],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",1,{"inputs":[{"name":"inlinestring"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",1,{"inputs":[{"name":"inlinestring"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",1,{"inputs":[{"name":"inlinestring"},{"name":"usize"},{"name":"char"}],"output":{"name":"result"}}],[11,"as_mut_slice","","Views the internal string buffer as a mutable sequence of bytes.",1,null],[11,"len","","Returns the number of bytes in this string.",1,{"inputs":[{"name":"inlinestring"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",1,{"inputs":[{"name":"inlinestring"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",1,{"inputs":[{"name":"inlinestring"}],"output":null}],[0,"string_ext","inlinable_string","A trait that exists to abstract string operations over any number of\nconcrete string type implementations.",null,null],[8,"StringExt","inlinable_string::string_ext","A trait that exists to abstract string operations over any number of\nconcrete string type implementations.",null,null],[10,"new","","Creates a new string buffer initialized with the empty string.",4,{"inputs":[{"name":"stringext"}],"output":{"name":"self"}}],[10,"with_capacity","","Creates a new string buffer with the given capacity. The string will be\nable to hold at least `capacity` bytes without reallocating. If\n`capacity` is less than or equal to `INLINE_STRING_CAPACITY`, the string\nwill not heap allocate.",4,{"inputs":[{"name":"stringext"},{"name":"usize"}],"output":{"name":"self"}}],[10,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",4,{"inputs":[{"name":"stringext"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",4,null],[10,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `InlinableString`, returning `None`\nif `v` contains any invalid data.",4,null],[10,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",4,null],[10,"from_raw_parts","","Creates a new `InlinableString` from a length, capacity, and pointer.",4,null],[10,"from_utf8_unchecked","","Converts a vector of bytes to a new `InlinableString` without checking\nif it contains valid UTF-8. This is unsafe because it assumes that the\nUTF-8-ness of the vector has already been validated.",4,{"inputs":[{"name":"stringext"},{"name":"vec"}],"output":{"name":"self"}}],[10,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",4,{"inputs":[{"name":"stringext"}],"output":{"name":"vec"}}],[10,"push_str","","Pushes the given string onto this string buffer.",4,{"inputs":[{"name":"stringext"},{"name":"str"}],"output":null}],[10,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",4,{"inputs":[{"name":"stringext"}],"output":{"name":"usize"}}],[10,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `InlinableString`. The collection may reserve more space to avoid\nfrequent reallocations.",4,{"inputs":[{"name":"stringext"},{"name":"usize"}],"output":null}],[10,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `InlinableString`. Does nothing if the capacity is already\nsufficient.",4,{"inputs":[{"name":"stringext"},{"name":"usize"}],"output":null}],[10,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length. If the\nstring's length is less than `INLINE_STRING_CAPACITY` and the string is\nheap-allocated, then it is demoted to inline storage.",4,{"inputs":[{"name":"stringext"}],"output":null}],[10,"push","","Adds the given character to the end of the string.",4,{"inputs":[{"name":"stringext"},{"name":"char"}],"output":null}],[10,"as_bytes","","Works with the underlying buffer as a byte slice.",4,null],[10,"truncate","","Shortens a string to the specified length.",4,{"inputs":[{"name":"stringext"},{"name":"usize"}],"output":null}],[10,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",4,{"inputs":[{"name":"stringext"}],"output":{"name":"option"}}],[10,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",4,{"inputs":[{"name":"stringext"},{"name":"usize"}],"output":{"name":"char"}}],[10,"insert","","Inserts a character into the string buffer at byte position `idx`.",4,{"inputs":[{"name":"stringext"},{"name":"usize"},{"name":"char"}],"output":null}],[10,"as_mut_slice","","Views the string buffer as a mutable sequence of bytes.",4,null],[10,"len","","Returns the number of bytes in this string.",4,{"inputs":[{"name":"stringext"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",4,{"inputs":[{"name":"stringext"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",4,{"inputs":[{"name":"stringext"}],"output":null}],[11,"new","collections::string","",5,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"with_capacity","","",5,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_utf8","","",5,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf16","","",5,null],[11,"from_utf16_lossy","","",5,null],[11,"from_raw_parts","","",5,null],[11,"from_utf8_unchecked","","",5,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"self"}}],[11,"into_bytes","","",5,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"push_str","","",5,{"inputs":[{"name":"string"},{"name":"str"}],"output":null}],[11,"capacity","","",5,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","",5,{"inputs":[{"name":"string"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","",5,{"inputs":[{"name":"string"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","",5,{"inputs":[{"name":"string"}],"output":null}],[11,"push","","",5,{"inputs":[{"name":"string"},{"name":"char"}],"output":null}],[11,"as_bytes","","",5,null],[11,"truncate","","",5,{"inputs":[{"name":"string"},{"name":"usize"}],"output":null}],[11,"pop","","",5,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","",5,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","",5,{"inputs":[{"name":"string"},{"name":"usize"},{"name":"char"}],"output":null}],[11,"as_mut_slice","","",5,null],[11,"len","","",5,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"fmt","inlinable_string","",0,{"inputs":[{"name":"inlinablestring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"inlinablestring"}}],[11,"from_iter","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"i"}],"output":{"name":"inlinablestring"}}],[11,"from_iter","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"i"}],"output":{"name":"inlinablestring"}}],[11,"extend","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"i"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"i"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"i"}],"output":null}],[11,"add","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"str"}],"output":{"name":"inlinablestring"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"inlinablestring"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"inlinablestring"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"h"}],"output":null}],[11,"borrow","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"str"}}],[11,"as_ref","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"str"}}],[11,"as_mut","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"str"}],"output":{"name":"inlinablestring"}}],[11,"default","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"str"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"inlinablestring"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"inlinablestring"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"inlinablestring"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"string"},{"name":"inlinablestring"}],"output":{"name":"bool"}}],[11,"eq","inlinable_string","",0,{"inputs":[{"name":"inlinablestring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"inlinestring"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"inlinestring"}],"output":{"name":"bool"}}],[11,"eq","inlinable_string::inline_string","",1,{"inputs":[{"name":"inlinestring"},{"name":"inlinablestring"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"inlinestring"},{"name":"inlinablestring"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"inlinablestring"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"cow"},{"name":"inlinablestring"}],"output":{"name":"bool"}}],[11,"eq","inlinable_string","",0,{"inputs":[{"name":"inlinablestring"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"self"}}],[11,"with_capacity","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_utf8","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf16","","",0,null],[11,"from_utf16_lossy","","",0,null],[11,"from_raw_parts","","",0,null],[11,"from_utf8_unchecked","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"vec"}],"output":{"name":"self"}}],[11,"into_bytes","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"vec"}}],[11,"push_str","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"str"}],"output":null}],[11,"capacity","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"usize"}}],[11,"reserve","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","",0,{"inputs":[{"name":"inlinablestring"}],"output":null}],[11,"push","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"char"}],"output":null}],[11,"as_bytes","","",0,null],[11,"truncate","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"usize"}],"output":null}],[11,"pop","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"option"}}],[11,"remove","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","",0,{"inputs":[{"name":"inlinablestring"},{"name":"usize"},{"name":"char"}],"output":null}],[11,"as_mut_slice","","",0,null],[11,"len","","",0,{"inputs":[{"name":"inlinablestring"}],"output":{"name":"usize"}}]],"paths":[[4,"InlinableString"],[3,"InlineString"],[3,"NotEnoughSpaceError"],[4,"Cow"],[8,"StringExt"],[3,"String"]]};
initSearch(searchIndex);
